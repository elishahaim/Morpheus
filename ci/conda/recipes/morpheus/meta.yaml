# SPDX-FileCopyrightText: Copyright (c) 2022-2023, NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{% set version = environ.get('GIT_VERSION', '0.0.0.dev').lstrip('v') + environ.get('VERSION_SUFFIX', '') %}
{% set minor_version =  version.split('.')[0] + '.' + version.split('.')[1] %}

package:
  name: morpheus-split
  version: {{ version }}

source:
  git_url: ../../../..

outputs:

  - name: morpheus
    build:
      number: {{ GIT_DESCRIBE_NUMBER }}
      string: cuda_{{ cuda_compiler_version }}_py{{ python }}_{{ GIT_DESCRIBE_HASH }}_{{ GIT_DESCRIBE_NUMBER }}
      script_env:
        # Note: Setting a default value here will overwrite the value from the
        # shell! Defaults should be set in the run_conda_build.sh script
        - CMAKE_CUDA_ARCHITECTURES
        - MORPHEUS_CACHE_DIR
        - MORPHEUS_PYTHON_BUILD_STUBS
        - MORPHEUS_SUPPORT_DOCA
        - PARALLEL_LEVEL
      run_exports:
        - {{ pin_subpackage("morpheus", max_pin="x.x") }}
      entry_points:
        - morpheus = morpheus.cli:run_cli
    script: morpheus_build.sh

    requirements:
      build:
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - {{ compiler("cuda") }}
        - automake 1.16.5 # Needed for DOCA build
        - ccache
        - cmake 3.25
        - cuda-cudart-dev {{ cuda_compiler_version }} # Needed by CMake to compile a test application
        - libtool # Needed for DOCA build
        - ninja
      host:
        - cuda-toolkit {{ cuda_compiler_version }}
        - cudf {{ rapids_version }}
        - cython >=0.29,<0.30
        - libcudf {{ rapids_version }}
        - librdkafka 1.9.2
        - mrc {{ minor_version }}
        - pip
        - pyarrow * *_cuda # Ensure we get a CUDA build. Version determined by cuDF
        - pybind11-stubgen 0.10.5
        - python {{ python }}
        - rapidjson 1.1
        - rdma-core >=48 # Needed for DOCA. Compatible with UCX 1.14.1
        - scikit-build 0.17.1
        - versioneer-518
      run:
        # Runtime only requirements. This + setup.py is the definitive runtime requirement list
        - {{ pin_compatible('cuda-cudart', min_pin='x.x', max_pin='x') }}
        - click >=8
        - configargparse 1.5.*
        - cudf
        - cudf_kafka {{ rapids_version }}.*
        - cupy # Version determined from cudf
        - datacompy 0.8.*
        - dill
        - distributed
        - docker-py 5.0.*
        - grpcio # Version determined from cudf
        - libmrc
        - libwebp>=1.3.2 # Required for CVE mitigation: https://nvd.nist.gov/vuln/detail/CVE-2023-4863
        - mlflow>=2.2.1,<3
        - mrc
        - networkx>=2.8
        - numpydoc 1.4.*
        - nvtabular {{ rapids_version }}.*
        - pandas 1.3.*
        - pluggy 1.0.*
        - pyarrow * *_cuda # Ensure we get a CUDA build. Version determined by cuDF
        - python
        - python-confluent-kafka 1.9.2
        - pytorch 2.0.1
        - pytorch-cuda
        - requests=2.31
        - requests-cache=1.1
        - scikit-learn 1.2.2.*
        - sqlalchemy <=2.0 # 2.0 is incompatible with pandas=1.3
        - tqdm 4.*
        - tritonclient 2.26.*
        - typing_utils 0.1.*
        - watchdog 2.1.*
        - websockets
      run_constrained:
        # Since we dont explicitly require this but other packages might, constrain the versions.
        - {{ pin_compatible('cudatoolkit', min_pin='x.x', max_pin='x') }}
    test:
      requires:
        - gputil
        - pytest
        - pytest-cov
        - pytest-benchmark
        # test that cuml can be installed in the env
        - cuml {{ rapids_version }}.*
      source_files:
        - docker/conda/environments/*
        - pyproject.toml
        - scripts/fetch_data.py
        - tests/*
      imports:
        - morpheus
      commands:
          - echo # make sure test requirements get installed

about:
  home: https://github.com/nv-morpheus/Morpheus
  license: Apache-2.0
  license_family: Apache
  license_file: LICENSE
  summary: Morpheus Cybersecurity Library
